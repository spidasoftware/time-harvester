#!/usr/bin/env node

// options:
// --this: pull the time for this week, not last
// --review: human readable output. 

var argv = require('optimist').argv;
var Promise = require('bluebird');
var R = require('ramda');

var Harvest = require('harvest')
      , harvest = new Harvest({
          subdomain: process.env.HARVEST_SUBDOMAIN,
          email: process.env.HARVEST_EMAIL,
          password: process.env.HARVEST_PASSWORD
      })
      TimeTracking = harvest.TimeTracking;

var convertEntryToSpida = function(harvestEntry){
    if (harvestEntry.hours==0) {
        return false
    }
    var spent_at = harvestEntry.spent_at.toString()
    if (harvestEntry.notes==null) harvestEntry.notes='SPIDA';
    var spidaEntry = {
      date: spent_at[5]+spent_at[6]+"/"+spent_at[8]+spent_at[9]+"/"+spent_at[0]+spent_at[1]+spent_at[2]+spent_at[3],
      task:harvestEntry.task,
      code:harvestEntry.notes.split(" ")[0],
      remarks:harvestEntry.notes,
      hours:Math.ceil(harvestEntry.hours*4)/4
    }
    return spidaEntry
}

var weeklyTime = []

var curr = new Date; // get current date
var first = curr.getDate() - curr.getDay() - 6; // First day is the day of the month - the day of the week
var last = first + 6; // last day is the first day + 6

if(argv.this){
    first = first+7;
    last = last+7;
}

var firstday = new Date(curr.setDate(first)).toUTCString();
var lastday = new Date(curr.setDate(last)).toUTCString();

var timesCalled = 0;

var totalTime = [];

var daily=Promise.promisify(TimeTracking.daily,TimeTracking);

Promise.settle(
    R.map(function(i) {
        var day=new Date();
        day.setDate(first+i);
        return daily({date:day}).then(R.compose(R.filter(R.identity),R.map(convertEntryToSpida),R.prop('day_entries')));
    }, R.range(0,6))
)
.then(function(v){
  if(argv.review){
    console.log(R.compose(R.flatten,R.map(R.func('value')))(v))
    console.log("Total Hours: "+R.sum(R.pluck("hours", R.compose(R.flatten,R.map(R.func('value')))(v) )))
  }else{
    R.compose(console.log,JSON.stringify,R.flatten,R.map(R.func('value')))(v)
  }
})
.catch(function(err) { throw err; });


// vim:ft=javascript
